// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "ctre/Phoenix.h"
#include "ElevatorConstants.h"

#include "Elevator.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "../Commands/ElevatorTarget.h"
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Elevator::Elevator() : frc::Subsystem("Elevator") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    elevatorMotor = RobotMap::elevatorElevatorMotor;
    elevatorBrake = RobotMap::elevatorElevatorBrake;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}

void Elevator::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        SetDefaultCommand(new ElevatorTarget());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void Elevator::Periodic() {
	// Put code here to be run every loop



}


// Put methods for controlling this subsystem
// here. Call these from Commands.

void Elevator::Init(bool pid){
	// * * * * * CHANGE MOTOR AND SOLENOID IDS * * * * * * * * * *

	isPID = pid;
	/* lets grab the 360 degree position of the MagEncoder's absolute position */
	//int absolutePosition = elevatorMotor->GetSelectedSensorPosition(0) & 0xFFF; /* mask out the bottom12 bits, we don't care about the wrap arounds */
	/* use the low level API to set the quad encoder signal */
	//elevatorMotor->SetSelectedSensorPosition(absolutePosition, kPIDLoopIdx, kTimeoutMs);
	elevatorMotor->SetSelectedSensorPosition(0, kPIDLoopIdx, kTimeoutMs);

	/* choose the sensor and sensor direction */
	elevatorMotor->ConfigSelectedFeedbackSensor(FeedbackDevice::CTRE_MagEncoder_Relative, kPIDLoopIdx, kTimeoutMs);
	elevatorMotor->SetSensorPhase(false);

	/* set the peak and nominal outputs, 12V means full */
	elevatorMotor->ConfigNominalOutputForward(0, kTimeoutMs);
	elevatorMotor->ConfigNominalOutputReverse(0, kTimeoutMs);
	elevatorMotor->ConfigPeakOutputForward(1, kTimeoutMs);
	elevatorMotor->ConfigPeakOutputReverse(-1, kTimeoutMs);

	elevatorMotor->Set(ControlMode::Position,0);
	if(pid){

		/* set closed loop gains in slot0 */
		//frc::SmartDashboard::GetString("P-Value");
		elevatorMotor->Config_kF(kPIDLoopIdx, 0, kTimeoutMs);
		elevatorMotor->Config_kP(kPIDLoopIdx, 0.1, kTimeoutMs);
		elevatorMotor->Config_kI(kPIDLoopIdx, 0.0, kTimeoutMs);
		//Last used number: .005
		elevatorMotor->Config_kD(kPIDLoopIdx, 0.0, kTimeoutMs);
		//Last used number: .1

	}

}


void Elevator::ElevatorGo(double newTargetPos){
	targetPos = newTargetPos;

}

void Elevator::ElevatorExecute(){
	double posThreshold = 0.05;
	double encoderValue = elevatorMotor->GetSelectedSensorPosition(0);
	double difference = targetPos - encoderValue;
	if(difference > posThreshold){
		//keep moving toward targetPos -> move up
		//open brake
		if (isPID) {
			//set target sensor
		} else {
			//start motor
		}
	}
	else if(difference < -posThreshold){
		//move down
		//open brake
		if (isPID) {
			//set target sensor
		} else {
			//start motor
		}


	}
	else{
		//stop motor
		//close brake

	}
}


