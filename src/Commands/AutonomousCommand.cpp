// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "AutonomousCommand.h"
#include "AutoRotate.h"
#include "AutoCmdGrp.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

AutonomousCommand::AutonomousCommand(): frc::Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void AutonomousCommand::Initialize() {
	Robot::driveBase->ResetAngle();
	Robot::driveBase->EncoderReset();

	int position=0;
	if (SmartDashboard::GetBoolean("DB/Button 0", false) &&
			!SmartDashboard::GetBoolean("DB/Button 1", false))
		position = 1;
	if (SmartDashboard::GetBoolean("DB/Button 1", false) &&
			!SmartDashboard::GetBoolean("DB/Button 0", false))
		position = 2;

	int override=0;
	if (SmartDashboard::GetBoolean("DB/Button 2", false) &&
			!SmartDashboard::GetBoolean("DB/Button 3", false))
		override=1;

	if (SmartDashboard::GetBoolean("DB/Button 3", false) &&
			!SmartDashboard::GetBoolean("DB/Button 2", false))
		override=2;

	autoCmd.reset(new AutoCmdGrp(position,override));
	autoCmd->Start();
}

// Called repeatedly when this Command is scheduled to run
void AutonomousCommand::Execute() {
	Robot::driveBase->PrintValues();

}

// Make this return true when this Command no longer needs to run execute()
bool AutonomousCommand::IsFinished() {
    return true;
}

// Called once after isFinished returns true
void AutonomousCommand::End() {

}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void AutonomousCommand::Interrupted() {

}
