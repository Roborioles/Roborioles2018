// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.



#include "AutoCmdGrp.h"
#include "AutoDrive.h"
#include "AutoRotate.h"
#include "ElevatorFloor.h"
#include "ElevatorHighScale.h"
#include "ElevatorScale.h"
#include "ElevatorSwitch.h"
#include "IntakeOpenCmd.h"
#include "IntakeDrive.h"
#include "WaitCmd.h"


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

AutoCmdGrp::AutoCmdGrp(int position, int override): CommandGroup() {
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
     // Add Commands here:
    // e.g. AddSequential(new Command1());
    //      AddSequential(new Command2());
    // these will run in order.
	std::string gameData;
	gameData = frc::DriverStation::GetInstance().GetGameSpecificMessage();

	// Position
	// 1 - left
	// 0 - middle or undefined
	// 2 - right

	// override
	// 0 - no override
	// 1 - score on switch, no matter what
	// 2 - score on scale, no matter what

	if (position==0 && override==0) {
		// No Input
		printf("Driving forward 10 feet\n");
		AddSequential(new AutoDrive(9));
	}

	if (position==1) {
		// Left Position
		if (gameData[0] == 'L') {
			// Switch also on left
			if (override < 2 || override == 3) {
				// Go for switch - left position - no override/switch override
				printf("Driving forward 13 feet, to score on left switch\n");
				AddSequential(new ElevatorSwitch());
				AddSequential(new AutoDrive(13));
				AddSequential(new AutoRotate(-75, .7));
				AddSequential(new AutoDrive(2));
				AddSequential(new IntakeOpenCmd(true));
				AddSequential(new WaitCmd(2));
				AddSequential(new AutoDrive(-1));
				AddSequential(new IntakeOpenCmd(false));
				AddSequential(new ElevatorFloor());
				AddSequential(new AutoDrive(-1));
			} else if (override == 2) {
				// go for scale - overriden, switch is also on left
				if (gameData[1] == 'L') {
					printf("Driving forward 26 feet, to score on left scale\n");
					AddSequential(new ElevatorScale());
					AddSequential(new AutoDrive(23.5));
					AddSequential(new AutoRotate(-40, .5));
					AddSequential(new AutoDrive(2));
					AddSequential(new IntakeOpenCmd(true));
					AddSequential(new WaitCmd(2));
					AddSequential(new AutoDrive(-2));
					AddSequential(new ElevatorFloor());
					AddSequential(new AutoDrive(-1));
				} else {
					// Scale is on the right, so good luck - left position,
					printf("Drive down the alley and hope for the best trying right scale\n");
					//down to alleyway
					AddSequential(new AutoDrive(18.5));
					AddSequential(new AutoRotate(-85, .5));
					//down the alleyway
					//AddSequential(new ElevatorScale());
					AddSequential(new AutoDrive(20));
					AddSequential(new AutoRotate(80, .5));
					//up on scale, closing in and releasing
					AddSequential(new AutoDrive(3));
					AddSequential(new AutoRotate(30, .5));
					AddSequential(new AutoDrive(2));
					AddSequential(new IntakeOpenCmd(true));
					AddSequential(new WaitCmd(2));
					AddSequential(new AutoDrive(-2));
					//AddSequential(new ElevatorFloor());
					AddSequential(new AutoDrive(-1));
				}
			}
		} else {
			// Switch is on the right
			if (override == 1) {
				printf("Drive down the alley and hope for the best trying right switch\n");
				//down to alleyway
				AddSequential(new AutoDrive(18.5));
				AddSequential(new AutoRotate(-80, .5));
				//down the alleyway
				AddSequential(new AutoDrive(20));
				AddSequential(new AutoRotate(-120, .5));
				//back down other side
				//AddSequential(new ElevatorSwitch());
				AddSequential(new AutoDrive(4));
				//up on switch, closing in and releasing
				AddSequential(new IntakeOpenCmd(true));
				AddSequential(new WaitCmd(2));
				AddSequential(new AutoDrive(-4));
			} else {
				if (gameData[1] == 'L') {
					// Scale is on the left, switch is on the right, scale is better
					printf("Driving forward 26 feet, to score on left scale\n");
					AddSequential(new ElevatorScale());
					AddSequential(new AutoDrive(23.5));
					AddSequential(new AutoRotate(-40, .5));
					AddSequential(new AutoDrive(2));
					AddSequential(new IntakeOpenCmd(true));
					AddSequential(new WaitCmd(2));
					AddSequential(new AutoDrive(-2));
					AddSequential(new ElevatorFloor());
					AddSequential(new AutoDrive(-1));
				} else {
					// Scale and switch are both on the right
					if (override == 0) {
						printf("Drive down the alley and hope for the best trying right switch\n");
						//down to alleyway
						AddSequential(new AutoDrive(18.5));
						AddSequential(new AutoRotate(-80, .5));
						//down the alleyway
						AddSequential(new AutoDrive(20));
						AddSequential(new AutoRotate(-120, .5));
						//back down other side
						//AddSequential(new ElevatorSwitch());
						AddSequential(new AutoDrive(4));
						//up on switch, closing in and releasing
						AddSequential(new IntakeOpenCmd(true));
						AddSequential(new WaitCmd(2));
						AddSequential(new AutoDrive(-4));
					} else {
						// Scale is on the right, so good luckS
						printf("Drive down the alley and hope for the best trying right scale\n");
						//down to alleyway
						AddSequential(new AutoDrive(18.5));
						AddSequential(new AutoRotate(-85, .5));
						//down the alleyway
						//AddSequential(new ElevatorScale());
						AddSequential(new AutoDrive(20));
						AddSequential(new AutoRotate(80, .5));
						//up on scale, closing in and releasing
						AddSequential(new AutoDrive(3));
						AddSequential(new AutoRotate(30, .5));
						AddSequential(new AutoDrive(2));
						AddSequential(new IntakeOpenCmd(true));
						AddSequential(new WaitCmd(2));
						AddSequential(new AutoDrive(-2));
						//AddSequential(new ElevatorFloor());
						AddSequential(new AutoDrive(-1));
					}
				}
			}
		}
	} else if (position==2) {
		// Right Position
		if (gameData[0] == 'R') {
			if (override < 2) {
				// Go for switch
				printf("Driving forward 13 feet, to score on right switch\n");
				//AddSequential(new ElevatorSwitch());
				AddSequential(new AutoDrive(13));
				AddSequential(new AutoRotate(85, .5));
				AddSequential(new AutoDrive(2));
				AddSequential(new IntakeOpenCmd(true));
				AddSequential(new AutoDrive(-2));
			} else if (override == 2) {
				// go for scale
				if (gameData[1] == 'R') {
					printf("Driving forward 26 feet, to score on right scale\n");
					AddSequential(new AutoDrive(22));
					AddSequential(new AutoRotate(50, .5));
					//AddSequential(new ElevatorScale());
					AddSequential(new AutoDrive(2.5));
					AddSequential(new IntakeOpenCmd(true));
				} else {
					// Scale is on the left, so good luck
					printf("Drive down the alley and hope for the best trying left scale\n");
				}
			}
		} else {
			// Switch is on the left
			if (override == 1) {
				printf("Drive down the alley and hope for the best trying left switch\n");
				AddSequential(new AutoDrive(17));
				AddSequential(new AutoRotate(80, .5));
				AddSequential(new AutoDrive(20));
			} else {
				if (gameData[1] == 'R') {
					// Scale is on the right, switch is on the left, scale is better
					printf("Driving forward 26 feet, to score on left scale\n");
					//AddSequential(new ElevatorScale());
					AddSequential(new AutoDrive(22));
					AddSequential(new AutoRotate(50, .5));
					AddSequential(new AutoDrive(2.5));
					AddSequential(new IntakeOpenCmd(true));
				} else {
					// Scale and switch are both on the left
					if (override == 0) {
						printf("Drive down the alley trying for the left switch\n");
					} else {
						printf("Drive down the allow trying for the left scale\n");
					}
				}
			}
		}
	} else if (position == 0 && override == 1) {
		//Middle Position
		if (gameData[0] == 'L') {
			printf("Middle, going for left switch\n");
			AddSequential(new AutoDrive(4));
			AddSequential(new AutoRotate(80, .5));
			AddSequential(new AutoDrive(5));
			AddSequential(new AutoRotate(-80, .5));
			//AddSequential(new ElevatorSwitch());
			AddSequential(new AutoDrive(4.5));
			AddSequential(new IntakeOpenCmd(true));
			AddSequential(new WaitCmd(2));
			AddSequential(new AutoDrive(-2));
		} else if (gameData[0] == 'R') {
			printf("Middle, going for left switch\n");
			//AddSequential(new ElevatorSwitch());
			AddSequential(new AutoDrive(8.5));
			AddSequential(new IntakeOpenCmd(true));
			AddSequential(new WaitCmd(2));
			AddSequential(new AutoDrive(-2));
		}
	}

	/*
	//1-left
	if (position == 1 && gameData[0] == 'L' && true) { //check to see if this wants to be overriden
		////AddSequential(new ElevatorSwitch());
		AddSequential(new AutoDrive(13));
		AddSequential(new AutoRotate(-80,.5));
		//AddSequential(new AutoDrive(3.5));
		//AddSequential(new IntakeOpenCmd(true));
	}

	//3-right
	else if (position == 3 && gameData[0] == 'R' && true) { //check to see if this wants to be overriden
		AddSequential(new AutoDrive(13));
		//AddParallel(new ElevatorSwitch());
		AddSequential(new AutoRotate(90,.5));
		AddSequential(new AutoDrive(1));  // distance is less the left, cause of the drift to the left
		AddSequential(new IntakeOpenCmd(true));
	}

	//1-right -- SWITCH OVERRIDE, SHOULD PROBBALY DO SCALE INSTEAD UNLESS SCALE IS ALSO BAD
	else if (position == 1 && gameData[0] == 'R' && true) { //true being check if this wants to be used as override
		AddSequential(new AutoDrive(20));
		//AddParallel(new ElevatorSwitch());
		AddSequential(new AutoRotate(-90,.5));
		AddSequential(new AutoDrive(17.333));
		AddSequential(new AutoRotate(-90,.5));
		AddSequential(new AutoDrive(5));
		AddSequential(new AutoRotate(-90,.5));
		AddSequential(new AutoDrive(2));
		AddSequential(new IntakeOpenCmd(true));
	}

	//3-left -- SWITCH OVERRIDE, SHOULD PROBABLY DO SCALE INSTEAD UNLESS SCALE IS ALSO BAD
	else if (position == 3 && gameData[0] == 'L' && true) { //true being check if this wants to be used as override
		AddSequential(new AutoDrive(20));
		//AddParallel(new ElevatorSwitch());
		AddSequential(new AutoRotate(90,.5));
		AddSequential(new AutoDrive(17.333));
		AddSequential(new AutoRotate(90,.5));
		AddSequential(new AutoDrive(5));
		AddSequential(new AutoRotate(90,.5));
		AddSequential(new AutoDrive(2));
		AddSequential(new IntakeOpenCmd(true));
	}

	//1-leftSCALE
	else if (position == 1 && gameData[1] == 'L' && true) { //true being check override
		AddSequential(new AutoDrive(27));
		//AddParallel(new ElevatorScale());
		AddSequential(new AutoRotate(-90,.5));
		AddSequential(new AutoDrive(2));
		AddSequential(new IntakeOpenCmd(true));

	}

	//3-rightSCALE
	else if (position == 3 && gameData[1] == 'R' && true) { //true being check if want this
		AddSequential(new AutoDrive(27));
		//AddParallel(new ElevatorScale());
		AddSequential(new AutoRotate(90,.5));
		AddSequential(new AutoDrive(2));
		AddSequential(new IntakeOpenCmd(true));

	}
	*/

    // To run multiple commands at the same time,
    // use AddParallel()
    // e.g. AddParallel(new Command1());
    //      AddSequential(new Command2());
    // Command1 and Command2 will run in parallel.

    // A command group will require all of the subsystems that each member
    // would require.
    // e.g. if Command1 requires chassis, and Command2 requires arm,
    // a CommandGroup containing them would require both the chassis and the
    // arm.
              // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS
                      // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS
 }
