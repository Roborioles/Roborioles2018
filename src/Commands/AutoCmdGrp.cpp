// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.



#include "AutoCmdGrp.h"
#include "AutoDrive.h"
#include "AutoRotate.h"
#include "ElevatorFloor.h"
#include "ElevatorHighScale.h"
#include "ElevatorScale.h"
#include "ElevatorSwitch.h"
#include "IntakeOpenCmd.h"
#include "IntakeDrive.h"


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

AutoCmdGrp::AutoCmdGrp(int position): CommandGroup() {
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
     // Add Commands here:
    // e.g. AddSequential(new Command1());
    //      AddSequential(new Command2());
    // these will run in order.

	//FMS game data (LLL, RRR, LRL, RLR)
	std::string gameData;
	gameData = frc::DriverStation::GetInstance().GetGameSpecificMessage();

	//NO INPUT -- goes to auto line
	if (position == 0) {
		AddSequential(new AutoDrive(10));
	}

	//SWITCH DEFAULT

	//1-left -- left position, goes to the left switch
	else if (position == 1 && gameData[0] == 'L') {
		AddSequential(new AutoDrive(13.6));
		//AddParallel(new ElevatorSwitch());
		AddSequential(new AutoRotate(-90,.5));
		AddSequential(new AutoDrive(2));
		AddSequential(new IntakeOpenCmd(true));

		//puts it back to floor, ready for battle
		AddSequential(new AutoDrive(-2));
		AddParallel(new ElevatorFloor());
		AddParallel(new IntakeOpenCmd(false));
	}

	//3-right
	else if (position == 3 && gameData[0] == 'R') {
		AddSequential(new AutoDrive(13.6));
		//AddParallel(new ElevatorSwitch());
		AddSequential(new AutoRotate(90,.5));
		AddSequential(new AutoDrive(2));
		AddSequential(new IntakeOpenCmd(true));

		//puts it back to floor, ready for battle
		AddSequential(new AutoDrive(-2));
		AddParallel(new ElevatorFloor());
		AddParallel(new IntakeOpenCmd(false));
	}

	//2-left
	else if (position == 2 && gameData[0] == 'L') {
		AddSequential(new AutoDrive(5));
		AddParallel(new ElevatorSwitch());
		AddSequential(new AutoRotate(90, .5));
		AddSequential(new AutoDrive(4));
		AddSequential(new AutoRotate(-90, .5));
		AddSequential(new AutoDrive(7));
		AddSequential(new IntakeOpenCmd(true));

		//puts it back to floor, ready for battle
		AddSequential(new AutoDrive(-2));
		AddParallel(new ElevatorFloor());
		AddParallel(new IntakeOpenCmd(false));
	}

	//2-right
	else if (position == 2 && gameData[1] == 'R') {
		AddSequential(new AutoDrive(5));
		AddParallel(new ElevatorSwitch());
		AddSequential(new AutoRotate(-90, .5));
		AddSequential(new AutoDrive(2));
		AddSequential(new AutoRotate(90, .5));
		AddSequential(new AutoDrive(7));
		AddSequential(new IntakeOpenCmd(true));

		//puts it back to floor, ready for battle
		AddSequential(new AutoDrive(-2));
		AddParallel(new ElevatorFloor());
		AddParallel(new IntakeOpenCmd(false));
	}

	//SWITCH OVERRIDE

	//1-right
	else if (position == 1 && gameData[0] == 'R' && !SmartDashboard::GetBoolean("DB/Button 3", false)) {
		AddSequential(new AutoDrive(20));
		//AddParallel(new ElevatorSwitch());
		AddSequential(new AutoRotate(-90,.5));
		AddSequential(new AutoDrive(17.333));
		AddSequential(new AutoRotate(-90,.5));
		AddSequential(new AutoDrive(5));
		AddSequential(new AutoRotate(-90,.5));
		AddSequential(new AutoDrive(2));
		AddSequential(new IntakeOpenCmd(true));

		//puts it back to floor, ready for battle
		AddSequential(new AutoDrive(-2));
		AddParallel(new ElevatorFloor());
		AddParallel(new IntakeOpenCmd(false));
	}

	//3-left
	else if (position == 3 && gameData[0] == 'L' && !SmartDashboard::GetBoolean("DB/Button 3", false)) {
		AddSequential(new AutoDrive(20));
		//AddParallel(new ElevatorSwitch());
		AddSequential(new AutoRotate(90,.5));
		AddSequential(new AutoDrive(17.333));
		AddSequential(new AutoRotate(90,.5));
		AddSequential(new AutoDrive(5));
		AddSequential(new AutoRotate(90,.5));
		AddSequential(new AutoDrive(2));
		AddSequential(new IntakeOpenCmd(true));

		//puts it back to floor, ready for battle
		AddSequential(new AutoDrive(-2));
		AddParallel(new ElevatorFloor());
		AddParallel(new IntakeOpenCmd(false));
	}

	//SCALE

	//1-leftSCALE
	else if (position == 1 && gameData[1] == 'L' && SmartDashboard::GetBoolean("DB/Button 3", false)) {
		AddSequential(new AutoDrive(27)); //CHECK THIS VALUE- NOT SURE IF GOOD
		//AddParallel(new ElevatorScale());
		AddSequential(new AutoRotate(-90,.5));
		//AddSequential(new AutoDrive(2)); DO WE WANT TO DO THIS???? STRAFING
		AddSequential(new IntakeOpenCmd(true));

		//puts it back to floor, ready for battle
		AddSequential(new AutoDrive(-2));
		AddParallel(new ElevatorFloor());
		AddParallel(new IntakeOpenCmd(false));
	}

	//3-rightSCALE
	else if (position == 3 && gameData[1] == 'R' && SmartDashboard::GetBoolean("DB/Button 3", false)) {
		AddSequential(new AutoDrive(27)); //DOUBLE CHECK VALUE
		//AddParallel(new ElevatorScale());
		AddSequential(new AutoRotate(90,.5));
		//AddSequential(new AutoDrive(2)); STRAFING???
		AddSequential(new IntakeOpenCmd(true));

		//puts it back to floor, ready for battle
		AddSequential(new AutoDrive(-2));
		AddParallel(new ElevatorFloor());
		AddParallel(new IntakeOpenCmd(false));
	}


    // To run multiple commands at the same time,
    // use AddParallel()
    // e.g. AddParallel(new Command1());
    //      AddSequential(new Command2());
    // Command1 and Command2 will run in parallel.

    // A command group will require all of the subsystems that each member
    // would require.
    // e.g. if Command1 requires chassis, and Command2 requires arm,
    // a CommandGroup containing them would require both the chassis and the
    // arm.
              // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS
                      // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS
 }
