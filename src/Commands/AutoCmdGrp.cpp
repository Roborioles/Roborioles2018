// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.



#include "AutoCmdGrp.h"
#include "AutoDrive.h"
#include "AutoRotate.h"
#include "ElevatorFloor.h"
#include "ElevatorHighScale.h"
#include "ElevatorScale.h"
#include "ElevatorSwitch.h"
#include "IntakeOpenCmd.h"
#include "IntakeDrive.h"
#include "WaitCmd.h"
#include "PickeyUppy.h"
#include "AutoCmdGrpPicker.h"


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

AutoCmdGrp::AutoCmdGrp(int position, int override): CommandGroup() {
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
     // Add Commands here:
    // e.g. AddSequential(new Command1());
    //      AddSequential(new Command2());
    // these will run in order.
	std::string gameData;
	gameData = frc::DriverStation::GetInstance().GetGameSpecificMessage();

	// Position
	// 1 - left
	// 0 - middle or undefined
	// 2 - right

	// override
	// 0 - no override -- switch if on our side, scale if switch isn't and it is, and halt in middle if opposite side
	// 1 - score on scale if on our side, halt if not on our side
	// 2 - score on scale if on our side, score on opposite side if there
	// 3 - basically 0 -- switch if on our side, scale if switch isnt and it is, and SCORE opposite scale if there

	if (position==0 && override==0) {
		// No Input, Bad Technician >:( or by choice
		printf("Driving forward 10 feet\n");
		AddSequential(new AutoDrive(9));
	}

	if (position==1) {
		// Left Position
		if (gameData[0] == 'L') {
			// Switch also on left
			if (override == 0 || override == 3) {
				//Left Robot, Left Switch, no scale override
				AddSequential(new AutoCmdGrpPicker(1));
			} else {
				// go for scale - overriden, even though switch is also on left
				if (gameData[1] == 'L') {
					AddSequential(new AutoCmdGrpPicker(2));
				} else {
					// Scale is on the right, so good luck
					// Left Robot, Right Switch
					if (override == 2)
						AddSequential(new AutoCmdGrpPicker(3));
						//score
					else
						AddSequential(new AutoCmdGrpPicker(4));
						//halt
				}
			}
		} else {
			// Switch is on the right, robot left.
			// ignore switch, basically only bother with scale
			if (gameData[1] == 'L') {
				// Scale is on the left
				AddSequential(new AutoCmdGrpPicker(2));
			} else {
				if (override == 0 || override == 1) {
					AddSequential(new AutoCmdGrpPicker(4));
					//halt
				} else {
					AddSequential(new AutoCmdGrpPicker(3));
					//score
				}
			}
		}
	}

	if (position==2) {
		// Right Position
		if (gameData[0] == 'R') {
			if (override == 0 || override == 3) {
				// Go for switch
				AddSequential(new AutoCmdGrpPicker(5));
			} else {
				// go for scale
				if (gameData[1] == 'R') {
					AddSequential(new AutoCmdGrpPicker(6));
				} else {
					// Scale is on the left, so good luck
					if (override == 2)
						AddSequential(new AutoCmdGrpPicker(7));
						//scores
					else
						AddSequential(new AutoCmdGrpPicker(8));
						//halts
				}
			}
		} else {
			// Switch is on the left
			if (gameData[1] == 'R') {
				// Scale is on the right, switch is on the left, scale is better
				AddSequential(new AutoCmdGrpPicker(6));
			} else {
				// Scale and switch are both on the left
				if (override == 0 || override == 1) {
					AddSequential(new AutoCmdGrpPicker(8));
					//halts
				} else {
					AddSequential(new AutoCmdGrpPicker(7));
					//scores
				}
			}
		}
	}

	if (position == 0 && override != 0) {
		//Middle Position
		if (gameData[0] == 'L') {
			AddSequential(new AutoCmdGrpPicker(9));
		} else if (gameData[0] == 'R') {
			AddSequential(new AutoCmdGrpPicker(10));
		}
	}


              // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS
                      // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS
 }
