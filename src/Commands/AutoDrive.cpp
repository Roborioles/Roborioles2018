// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "AutoDrive.h"
int counter = 0;
int t = 0;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

AutoDrive::AutoDrive(double distance): frc::Command() {
    m_distance = distance;
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::driveBase.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void AutoDrive::Initialize() {
	SetTimeout(abs(m_distance) / 1.25);
	Robot::driveBase->ResetAngle();
	Robot::driveBase->EncoderReset();
	Robot::driveBase->EnablePID(m_distance);
	Robot::driveBase->AutoDrive(m_distance);
	//SetTimeout(10);
	Robot::driveBase->ResetHelpers(m_distance);
}

// Called repeatedly when this Command is scheduled to run
void AutoDrive::Execute() {
	t++;
	Robot::elevator->ElevatorExecute();
	Robot::driveBase->CheckPosition();
	if (Robot::driveBase->isOnTarget(m_distance))
		counter++;
	else
		counter = 0;
	Robot::driveBase->VaryPID(t, m_distance);
}

// Make this return true when this Command no longer needs to run execute()
bool AutoDrive::IsFinished() {
	//5.11*10*4096
	//2.5*10*4096
	if (IsTimedOut()  || (counter >= 25))
		return true;
	else
		return false;
}

// Called once after isFinished returns true
void AutoDrive::End() {
	printf("AUTO DRIVE END");
	Robot::driveBase->DisablePID();
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void AutoDrive::Interrupted() {
	Robot::driveBase->DisablePID();
}
